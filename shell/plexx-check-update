#!/bin/bash
set -euo pipefail

has_cmd(){ command -v "$1" >/dev/null 2>&1 ; }

# Raccogli elenco immagini
IMAGES=()
if [ "$#" -gt 0 ] && [ "$1" = "--all" ]; then
  mapfile -t IMAGES < <(docker ps -a --format '{{.Image}}' | sort -u)
elif [ "$#" -gt 0 ]; then
  IMAGES=("$@")
else
  mapfile -t IMAGES < <(docker ps --format '{{.Image}}' | sort -u)
fi

if [ "${#IMAGES[@]}" -eq 0 ]; then
  echo "Nessuna immagine da controllare." >&2
  exit 0
fi

# Prova a capire architettura per selezionare il digest corretto
ARCH="amd64"
OS="linux"
DOCKER_ARCH="$(docker version --format '{{.Server.Arch}}' 2>/dev/null || true)"
[ -n "$DOCKER_ARCH" ] && ARCH="$DOCKER_ARCH"

# Funzioni helper
get_local_digest(){
  # Ritorna sha256:... del primo RepoDigest
  docker image inspect "$1" --format '{{index .RepoDigests 0}}' 2>/dev/null | awk -F@ '{print $2}'
}

get_remote_digest(){
  # Usa jq se disponibile per scegliere digest per OS/ARCH; altrimenti prende il primo digest
  if has_cmd jq; then
    docker manifest inspect "$1" 2>/dev/null | \
      jq -r --arg arch "$ARCH" --arg os "$OS" '
        if .manifests then
          (.manifests[] | select(.platform.architecture==$arch and .platform.os==$os) | .digest) // empty
        else
          .config.digest // empty
        end
      '
  else
    docker manifest inspect "$1" 2>/dev/null | grep -m1 '"digest"' | awk -F'"' '{print $4}'
  fi
}

get_label_version(){
  docker inspect "$1" --format '{{ index .Config.Labels "org.opencontainers.image.version" }}' 2>/dev/null || true
}

# Intestazione output
printf "%-45s %-8s %-15s %-18s %-18s\n" "IMAGE" "UPDATE" "VERSION (local)" "LOCAL DIGEST" "REMOTE DIGEST"
printf "%-45s %-8s %-15s %-18s %-18s\n" "---------------------------------------------" "--------" "---------------" "------------------" "------------------"

NEED_UPDATE=0

for IMAGE in "${IMAGES[@]}"; do
  LOCAL_DIGEST="$(get_local_digest "$IMAGE")"
  REMOTE_DIGEST="$(get_remote_digest "$IMAGE")"

  # salta immagini senza digest locale o remoto (non comparabili)
  if [ -z "$LOCAL_DIGEST" ] || [ -z "$REMOTE_DIGEST" ]; then
    # Se vuoi vederle comunque, commenta la riga sotto e stampa "N/D"
    continue
  fi

  if [ "$LOCAL_DIGEST" != "$REMOTE_DIGEST" ]; then
    NEED_UPDATE=1
    LOCAL_VER="$(get_label_version "$IMAGE")"
    [ -n "$LOCAL_VER" ] || LOCAL_VER="N/D"
    printf "%-45s %-8s %-15s %-18s %-18s\n" \
      "$IMAGE" "YES" "$LOCAL_VER" "${LOCAL_DIGEST:0:18}" "${REMOTE_DIGEST:0:18}"
  fi
done

# Exit code 0 se tutto aggiornato, 1 se almeno una immagine Ã¨ da aggiornare
exit $NEED_UPDATE